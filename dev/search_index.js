var documenterSearchIndex = {"docs":
[{"location":"#BatchNLPKernels.jl","page":"Home","title":"BatchNLPKernels.jl","text":"","category":"section"},{"location":"#BatchNLPKernels.BatchModel","page":"Home","title":"BatchNLPKernels.BatchModel","text":"BatchModel{MT,E}\n\nA wrapper around ExaModel that pre-initializes buffers for batch operations. Allows efficient evaluation of multiple points simultaneously.\n\nFields\n\nmodel::ExaModel: The underlying ExaModel\nbatch_size::Int: Number of points to evaluate simultaneously\nobj_work::Union{MT,Nothing}: Batch objective values (nobj × batch_size)\ncons_work::Union{MT,Nothing}: Batch constraint values (nconaug × batch_size)\ncons_out::Union{MT,Nothing}: Dense constraint output buffer (ncon × batch_size)\ngrad_work::Union{MT,Nothing}: Batch gradient values (nnzg × batch_size)\ngrad_out::Union{MT,Nothing}: Dense gradient output buffer (nvar × batch_size)\njprod_work::Union{MT,Nothing}: Batch jacobian values (nnzj × batch_size)\nhprod_work::Union{MT,Nothing}: Batch hessian values (nnzh × batch_size)\njprod_out::Union{MT,Nothing}: Batch jacobian-vector product buffer (ncon × batch_size)\njtprod_out::Union{MT,Nothing}: Batch jacobian transpose-vector product buffer (nvar × batch_size)\nhprod_out::Union{MT,Nothing}: Batch hessian-vector product buffer (nvar × batch_size)\n\n\n\n\n\n","category":"type"},{"location":"#BatchNLPKernels.BatchModel-Union{Tuple{C}, Tuple{O}, Tuple{E}, Tuple{VT}, Tuple{T}, Tuple{ExaModels.ExaModel{T, VT, E, O, C}, Int64}} where {T, VT, E, O, C}","page":"Home","title":"BatchNLPKernels.BatchModel","text":"BatchModel(model::ExaModel, batch_size::Int; config=BatchModelConfig())\n\nCreate a BatchModel wrapper around an ExaModel with pre-allocated buffers for batch operations. Use config to specify which buffers to allocate.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig\n\nConfiguration struct for controlling which buffers are allocated in a BatchModel.\n\nFields\n\nobj::Bool: Allocate objective buffer (default: true)\ncons::Bool: Allocate constraint buffers (default: true)\ngrad::Bool: Allocate gradient buffers (default: false)\njac::Bool: Allocate jacobian buffer (default: false)\nhess::Bool: Allocate hessian buffer (default: false)\njprod::Bool: Allocate jacobian-vector product buffer (default: false)\njtprod::Bool: Allocate jacobian transpose-vector product buffer (default: false)\nhprod::Bool: Allocate hessian-vector product buffer (default: false)\n\n\n\n\n\n","category":"type"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:full}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:full)\n\nFull configuration with all buffers allocated.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{Val{:minimal}}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(:minimal)\n\nMinimal configuration with only objective and constraint buffers.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.BatchModelConfig-Tuple{}","page":"Home","title":"BatchNLPKernels.BatchModelConfig","text":"BatchModelConfig(; obj=true, cons=true, grad=false, jac=false, hess=false, jprod=false, jtprod=false, hprod=false)\n\nCreate a BatchModelConfig with specified buffer allocations.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.cons_nln_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.cons_nln_batch!","text":"cons_nln_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate constraints for a batch of solutions and parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.cons_nln_batch!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.cons_nln_batch!","text":"cons_nln_batch!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate constraints for a batch of solutions.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.grad_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.grad_batch!","text":"grad_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, G::AbstractMatrix)\n\nEvaluate gradients for a batch of points with different parameters.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.grad_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.grad_batch!","text":"grad_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate objective gradient for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.grad_batch!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.grad_batch!","text":"grad_batch!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate objective gradient for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.hess_coord_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.hess_coord_batch!","text":"hess_coord_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, Y::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.hess_coord_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.hess_coord_batch!","text":"hess_coord_batch!(bm::BatchModel, X::AbstractMatrix, Y::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.hprod_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.hprod_batch!","text":"hprod_batch!(bm::BatchModel, X::AbstractMatrix, Y::AbstractMatrix, V::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.hprod_batch!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.hprod_batch!","text":"hprod_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, Y::AbstractMatrix, V::AbstractMatrix; obj_weight=1.0)\n\nEvaluate Hessian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jac_coord_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jac_coord_batch!","text":"jac_coord_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate Jacobian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jac_coord_batch!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jac_coord_batch!","text":"jac_coord_batch!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate Jacobian coordinates for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jprod_nln_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jprod_nln_batch!","text":"jprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jprod_nln_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jprod_nln_batch!","text":"jprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jprod_nln_batch!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.jprod_nln_batch!","text":"jprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix, Jv::AbstractMatrix)\n\nEvaluate Jacobian-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jtprod_nln_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jtprod_nln_batch!","text":"jtprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jtprod_nln_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.jtprod_nln_batch!","text":"jtprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, V::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.jtprod_nln_batch!-Tuple{BatchModel, Vararg{AbstractMatrix, 4}}","page":"Home","title":"BatchNLPKernels.jtprod_nln_batch!","text":"jtprod_nln_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix, V::AbstractMatrix, Jtv::AbstractMatrix)\n\nEvaluate Jacobian-transpose-vector products for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.obj_batch!-Tuple{BatchModel, AbstractMatrix, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.obj_batch!","text":"obj_batch!(bm::BatchModel, X::AbstractMatrix, Θ::AbstractMatrix)\n\nEvaluate objective function for a batch of points.\n\n\n\n\n\n","category":"method"},{"location":"#BatchNLPKernels.obj_batch!-Tuple{BatchModel, AbstractMatrix}","page":"Home","title":"BatchNLPKernels.obj_batch!","text":"obj_batch!(bm::BatchModel, X::AbstractMatrix)\n\nEvaluate objective function for a batch of points.\n\n\n\n\n\n","category":"method"}]
}
